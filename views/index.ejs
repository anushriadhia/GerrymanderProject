<!DOCTYPE html>
<html>
  <% include partials/head %>
  <body class="w3-light-grey">

    <!-- Sidebar/menu -->
    <nav class="w3-sidebar w3-collapse w3-white w3-animate-left" style="z-index:3;width:300px;" id="mySidebar"><br>
     <div class="w3-container">
       <h5>Upload Files</h5>
       .shp <input id="shp" type="file" name=".shp" />
       .dbf <input id="dbf" type="file" name=".dbf" />
       <h5>Map Types</h5>
     </div>

     <div id="div-nav-drawer" class="w3-bar-block">
       <a href="#" class="w3-bar-item w3-button w3-padding-16 w3-hide-large w3-dark-grey w3-hover-black" onclick="w3_close()" title="close menu"><i class="fa fa-remove fa-fw"></i>Â  Close Menu</a>

     </div>
    </nav>

    <!-- Overlay effect when opening sidebar on small screens -->
    <div class="w3-overlay w3-hide-large w3-animate-opacity" onclick="w3_close()" style="cursor:pointer" title="close side menu" id="myOverlay"></div>

    <!-- !PAGE CONTENT! -->
    <div class="w3-main" style="margin-left:300px;margin-top:43px;">

      <!-- <p>View project at <a href="http://github.com/wavded/js-shapefile-to-geojson">http://github.com/wavded/js-shapefile-to-geojson</a>. -->
      <script src="http://rs1.adc4gis.com/js/openlayers/2.9.1/OpenLayers-Proj4.js"></script>
      <script src="stream.js"></script>
      <script src="shapefile.js"></script>
      <script src="dbf.js"></script>
      <script type="text/javascript">
          OpenLayers._getScriptLocation = function(){
              return "http://rs1.adc4gis.com/js/openlayers/2.9.1/";
          };
          var map = new OpenLayers.Map("map",{allOverlays: true}),
              parser = new OpenLayers.Format.GeoJSON(),
              vector = new OpenLayers.Layer.Vector("Converted")
          map.addLayer(vector);
          var onchange = function(e) {
            console.log("File uploaded. Processing...");
              var shpFile = document.getElementById('shp').files[0];
              var dbfFile = document.getElementById('dbf').files[0];
              if (shpFile) {
                  var opts = { shp: shpFile };
                  if (dbfFile) {
                      opts['dbf'] = dbfFile;
                  }
                  shapefile = new Shapefile(opts, function(data){
                      //var features = parser.read(data.geojson);
                      //vector.addFeatures(features);
                      //map.zoomToExtent(vector.getDataExtent());
                      console.log(data);
                  });
              }
          }
          document.body.onload = function(){
              document.getElementById('shp').addEventListener('change', onchange, false);
              document.getElementById('dbf').addEventListener('change', onchange, false);
          }
      </script>

     <div class="w3-panel">
       <div class="w3-row-padding" style="margin:0 -16px">
         <br><div id="map"></div>
           <div id="div-graphs" class="w3-twothird">
             <table id = "districtTable" class="mdl-data-table">
                <thead>
                    <tr>
                      <th>District</th>
                      <th>Reock</th>
                      <th>Polsby-Popper</th>
                      <th>Schwartzberg</th>
                      <th>X-Symmetry</th>
                      <th>Length-Width</th>
                      <th>Convex-Hull</th>
                    </tr>
                </thead>
                <tbody id="districtTableBody"></tbody>
              </table>
           </div>
           <div id="div-metrics" class="w3-third">
             <h5>District Information</h5>
             <div id = "barChart"></div><br>
             <div id = "lengthwidthBarChart"></div>
           </div>
         </div>
       </div>
     </div>

    
    
    <script>
    $(document).ready(function() {
      var ncrGeoJSONDump =  "<%= geoDump %>";
      var dataObj = JSON.parse(ncrGeoJSONDump.replace(/&#34;/g, '"'));

      //dynamic html table
      for(let district in dataObj){
        $('#districtTableBody')
          .append($('<tr></tr>').attr('id', district)
            .append($('<th></th').addClass(`matchTable boxable${district}`).text(district))
            .append($('<th></th').addClass(`reockAnalysis boxable${district}`).text(dataObj[district]['Reock'].toFixed(3)))
            .append($('<th></th').addClass(`polsbyAnalysis boxable${district}`).text(dataObj[district]['PolsbyPopper'].toFixed(3)))
            .append($('<th></th').addClass(`schwartzbergAnalysis boxable${district}`).text(dataObj[district]['Schwartzberg'].toFixed(3)))
            .append($('<th></th').addClass(`colorAnalysis boxable${district}`).text(dataObj[district]['XSymmetry'].toFixed(3)))
            .append($('<th></th').addClass(`colorAnalysis boxable${district}`).text(dataObj[district]['LengthWidth'].toFixed(3)))
            .append($('<th></th').addClass(`convexhullAnalysis boxable${district}`).text(dataObj[district]['ConvexHull'].toFixed(3))
          )
        ); 
      }

      let oTable = $('#districtTable').DataTable( {
        scrollY:        600,
        scrollCollapse: true,
        paging:         false,
        fixedColumns:   true,
        select:         true,
        columnDefs: [
            {
                className: 'mdl-data-table__cell--non-numeric'
            }
        ]
      } );

      $(".reockAnalysis").each(function() {
        // get text into variable
        var colText = $(this).text();
        var target = 0.289;
        // need to create an action
        if (colText <= target) {
          $(this).addClass('good');
        }
        else {
          $(this).addClass('bad');
        }
      });

      $(".polsbyAnalysis").each(function() {
        // get text into variable
        var colText = $(this).text();
        var target = 0.095;
        // need to create an action
        if (colText <= target) {
          $(this).addClass('good');
        }
        else {
          $(this).addClass('bad');
        }
      });

      $(".schwartzbergAnalysis").each(function() {
        // get text into variable
        var colText = $(this).text();
        var target = 0.308;
        // need to create an action
        if (colText <= target) {
          $(this).addClass('good');
        }
        else {
          $(this).addClass('bad');
        }
      });

      $(".convexhullAnalysis").each(function() {
        // get text into variable
        var colText = $(this).text();
        var target = 0.494;
        // need to create an action
        if (colText <= target) {
          $(this).addClass('good');
        }
        else {
          $(this).addClass('bad');
        }
      });

      $(".colorAnalysis").each(function() {
        // get text into variable
        var colText = $(this).text();
        // need to create an action
        if (colText <= .6) {
          $(this).addClass('bad');
        }
        else {
          $(this).addClass('good');
        }
      });

      //highlight row and generate charts on hover

      $('#districtTableBody tr').hover(function(){
        let district = $(this).attr('id');
        highlightDistrict(district);
        generateCharts(district);

        //highlighting the rows with the good/bad/ok colors
        $(`.boxable${district}.bad`).css('background-color', '#ff6666');
        $(`.boxable${district}.good`).css('background-color', '#99ff99');
        $(`.boxable${district}.okay`).css('background-color', '#ffe680');

        console.log(`hovering at district ${district}`);
        

      }, function(){
        resetAllHighlights();
        let district = $(this).attr('id');

        //reset all color highlights
        $(`.boxable${district}.bad`).css('background-color', '');
        $(`.boxable${district}.good`).css('background-color', '');
        $(`.boxable${district}.okay`).css('background-color', '');
        $(`.boxable${district}.bad`).css('box-shadow', 'inset 2px 2px 7px #c02424');
        $(`.boxable${district}.good`).css('box-shadow', 'inset 2px 2px 7px #2cac2c');
        $(`.boxable${district}.okay`).css('box-shadow', 'inset 2px 2px 7px #c4a62f');

      });
      

      function generateCharts(district) {

        var barChart = c3.generate({
            title: {
                text:`District ${district} scores`
            },
            bindto: '#barChart',
            data: {
                type: 'bar',
                json: [
                    { 'indicator': 'Reock', 'score': dataObj[district]['Reock'].toFixed(3)},
                    { 'indicator': 'Polsby-Popper', 'score': dataObj[district]['PolsbyPopper'].toFixed(3)},
                    { 'indicator': 'Schwartzberg', 'score': dataObj[district]['Schwartzberg'].toFixed(3)},
                    { 'indicator': 'X-Symmetry', 'score': dataObj[district]['XSymmetry'].toFixed(3)},
                    { 'indicator': 'Length-Width', 'score': dataObj[district]['LengthWidth'].toFixed(3)},
                    { 'indicator': 'Convex-Hull', 'score': dataObj[district]['ConvexHull'].toFixed(3)}
                ],
                keys: {
                    x: 'indicator',
                    value: ['score']
                },
                labels: true
            },
            axis: {
                x: {
                    type: 'category'
                },
                y: {
                    max: 1,
                    min: 0,
                    padding: {top:0, bottom:0}
                }
            },
            bar: {
                width: {
                    ratio: .9
                }
            }
        });

        var lengthwidthStateAverage = 0;

        for(let district in dataObj){
          lengthwidthStateAverage += dataObj[district]['LengthWidth']
        }

        lengthwidthStateAverage = lengthwidthStateAverage / Object.keys(dataObj).length;

        var lengthwidthBarChart = c3.generate({
            title: {
                text: 'District ' + district + ' Length-Width'
            },
            bindto: '#lengthwidthBarChart',
            data: {
                type: 'bar',
                json: [
                    {  'indicator': 'District', 'score': dataObj[district]['LengthWidth'].toFixed(3) },
                    {  'indicator': 'State Average', 'score': lengthwidthStateAverage.toFixed(3) }
                ],
                keys: {
                    x: 'indicator',
                    value: ['score']
                },
                labels: true
            },
            axis: {
                    x: {
                        type: 'category'
                    },
                    y: {
                        max: 1,
                        min: 0,
                        padding: {top:0, bottom:0}
                    }
            },
            bar: {
                width: {
                    ratio: .9
                }
            }
        });
      }


    });

    </script>
  </body>
</html>
