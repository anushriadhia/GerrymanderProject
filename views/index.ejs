<!DOCTYPE html>
<html>
  <% include partials/head %>
  <body class="w3-light-grey">
    <!-- Sidebar/menu -->
    <nav class="w3-sidebar w3-collapse w3-white w3-animate-left" style="z-index:3;width:300px;" id="mySidebar"><br>
     <div class="w3-container">
       <h5>Helpful Information</h5>
       <!-- Trigger the modal with a button -->
         <button type="button" class="btn btn-info btn-lg" data-toggle="modal" data-target="#myModal">Open Modal</button>
       <!-- Click here <href = "measure-info.html"> -->
       <h5>Select Measure Boundaries</h5>
      <select id="boundarySelect" onchange="changeBoundary()">
        <option value="original">Original Gerrymander
        <option value="median">Median
        <option value="custom">Custom
      </select>

      <div id="boundaryType"></div>
      <div id="customBoundarySelect" style="display: none;">
        <br>
        Reock: <input type="text" id="reockBoundary" placeholder="0.5" style="float:right;"><br><br>
        Polsby-Popper: <input type="text" id="polsbyPopperBoundary" placeholder="0.5" style="float:right;"><br><br>
        Schwartzberg: <input type="text" id="schwartzbergBoundary" placeholder="0.5" style="float:right;"><br><br>
        Convex-Hull: <input type="text" id="convexHullBoundary" placeholder="0.5" style="float:right;"><br><br>
        Length-Width: <input type="text" id="lengthWidthBoundary" placeholder="0.5" style="float:right;"><br><br>
        X-Symmetry: <input type="text" id="xSymmetryBoundary" placeholder="0.5" style="float:right;"><br><br>
        <input type="submit" value="Submit" onclick = "getBoundaryInput()">
      </div>

      <script>
      $('#boundaryType').html("Now displaying original boundaries.<br>Reock: 0.289<br>Polsby-Popper: 0.095<br>Schwartzberg: 0.308<br>Convex-Hull: 0.494<br>Length-Width: 0.717<br>X-Symmetry: 0.384");

      var reockDiv = 0;
      var polsbyPopperDiv = 0;
      var schwartzbergDiv = 0;
      var convexHullDiv = 0;
      var lengthWidthDiv = 0;
      var xSymmetryDiv = 0;

      function colorTable(metric, target){
        $(metric).each(function(){
          var colText = $(this).text();

          if(colText > target){
            $(this).removeClass('bad');
            $(this).addClass('good');
          } else {
            $(this).removeClass('good');
            $(this).addClass('bad');
          }
        });
      }

      //Repeated here for purpose of making the boundary coloration dynamic
      //highlight row and generate charts on hover
      $('#districtTableBody tr').hover(function(){
        var district = $(this).attr('id');
        highlightDistrict(district);

        //highlighting the rows with the good/bad/ok colors
        $(`.boxable${district}.bad`).css('background-color', '#ff6666');
        $(`.boxable${district}.good`).css('background-color', '#99ff99');

      }, function(){
        resetAllHighlights();
        var district = $(this).attr('id');

        //reset all color highlights
        $(`.boxable${district}.bad`).css('background-color', '');
        $(`.boxable${district}.good`).css('background-color', '');
      });

      function getBoundaryInput() {
        if (reockBoundary.value.length != 0) {
          reockDiv = Number($('#reockBoundary').val());
          colorTable(".reockAnalysis", reockDiv);
        }

        if (polsbyPopperBoundary.value.length != 0) {
          polsbyPopperDiv = Number($('#polsbyPopperBoundary').val());
          colorTable(".polsbyAnalysis", polsbyPopperDiv);
        }

        if (schwartzbergBoundary.value.length != 0) {
          schwartzbergDiv = Number($('#schwartzbergBoundary').val());
          colorTable(".schwartzbergAnalysis", schwartzbergDiv);
        }

        if (convexHullBoundary.value.length != 0) {
          convexHullDiv = Number($('#convexHullBoundary').val());
          colorTable(".convexHullAnalysis", convexHullDiv);
        }

        if (lengthWidthBoundary.value.length != 0) {
          lengthWidthDiv = Number($('#lengthWidthBoundary').val());
          colorTable(".lengthWidthAnalysis", lengthWidthDiv);
        }

        if (xSymmetryBoundary.value.length != 0) {
          xSymmetryDiv = Number($('#xSymmetryBoundary').val());
          colorTable(".xSymmetryAnalysis", xSymmetryDiv);
        }
      }

      function changeBoundary() {
          var boundarySelectResponse = document.getElementById("boundarySelect").value;
          if (boundarySelectResponse == "custom") {
            $('#boundaryType').html("<br>Enter custom boundaries between 0 and 1:");
            $('#customBoundarySelect').show();
          }
          else if (boundarySelectResponse == "median") {
            $('#customBoundarySelect').hide();
            $('#boundaryType').html("Now displaying " + boundarySelectResponse + " boundaries.<br>Reock: 0.500<br>Polsby-Popper: 0.500<br>Schwartzberg: 0.500<br>Convex-Hull: 0.500<br>Length-Width: 0.500<br>X-Symmetry: 0.500");
            colorTable(".reockAnalysis", .5);
            colorTable(".polsbyAnalysis", .5);
            colorTable(".schwartzbergAnalysis", .5);
            colorTable(".convexHullAnalysis", .5);
            colorTable(".xSymmetryAnalysis", .5);
            colorTable(".lengthWidthAnalysis", .5);
          }
          else {
            $('#customBoundarySelect').hide();
            $('#boundaryType').html("Now displaying " + boundarySelectResponse + " boundaries.<br>Reock: 0.289<br>Polsby-Popper: 0.095<br>Schwartzberg: 0.308<br>Convex-Hull: 0.494<br>Length-Width: 0.717<br>X-Symmetry: 0.384");
            colorTable(".reockAnalysis", .289);
            colorTable(".polsbyAnalysis", .095);
            colorTable(".schwartzbergAnalysis", .308);
            colorTable(".convexHullAnalysis", .494);
            colorTable(".xSymmetryAnalysis", .384);
            colorTable(".lengthWidthAnalysis", .717);
          }
      }
      </script>
       <h5>Map Types</h5>
      </div>

     <div id="div-nav-drawer" class="w3-bar-block">
       <a href="#" class="w3-bar-item w3-button w3-padding-16 w3-hide-large w3-dark-grey w3-hover-black" onclick="w3_close()" title="close menu"><i class="fa fa-remove fa-fw"></i>Â  Close Menu</a>

     </div>
    </nav>


    <div id="map" style="margin-left:300px;"></div>
    <div id="div-graphs" class="w3-twothird">
      <table id = "districtTable" class="mdl-data-table">
         <thead>
             <tr>
               <th>District</th>
               <th>Reock</th>
               <th>Polsby-Popper</th>
               <th>Schwartzberg</th>
               <th>Convex-Hull</th>
               <th>Length-Width</th>
               <th>X-Symmetry</th>
             </tr>
         </thead>
         <tbody id="districtTableBody"></tbody>
       </table>
    </div>

    <div id="div-metrics" class="w3-third">
      <br><br>
      <div id = "barChart"></div><br>
      <div id = "lengthwidthBarChart"></div>
    </div>

    <!-- Modal -->
     <div class="modal fade" id="myModal" role="dialog">
       <div class="modal-dialog modal-lg">

         <!-- Modal content-->
         <div class="modal-content">
           <div class="modal-header">
             <button type="button" class="close" data-dismiss="modal">&times;</button>
             <h4 class="modal-title">Helpful Information</h4>
           </div>
           <div class="modal-body">
             <% include partials/information %>
           </div>
           <div class="modal-footer">
             <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
           </div>
         </div>

       </div>
     </div>


    <script>
    $(document).ready(function() {
      var ncrGeoJSONDump =  "<%= geoDump %>";
      var dataObj = JSON.parse(ncrGeoJSONDump.replace(/&#34;/g, '"'));

      //dynamic html table
      for(var district in dataObj){
        $('#districtTableBody')
          .append($('<tr></tr>').attr('id', district)
            .append($('<th></th').addClass(`matchTable boxable${district}`).text(district))
            .append($('<th></th').addClass(`reockAnalysis boxable${district}`).text(dataObj[district]['Reock'].toFixed(3)))
            .append($('<th></th').addClass(`polsbyAnalysis boxable${district}`).text(dataObj[district]['PolsbyPopper'].toFixed(3)))
            .append($('<th></th').addClass(`schwartzbergAnalysis boxable${district}`).text(dataObj[district]['Schwartzberg'].toFixed(3)))
            .append($('<th></th').addClass(`convexHullAnalysis boxable${district}`).text(dataObj[district]['ConvexHull'].toFixed(3)))
            .append($('<th></th').addClass(`lengthWidthAnalysis boxable${district}`).text(dataObj[district]['LengthWidth'].toFixed(3)))
            .append($('<th></th').addClass(`xSymmetryAnalysis boxable${district}`).text(dataObj[district]['XSymmetry'].toFixed(3)))
        );
      }

      var oTable = $('#districtTable').DataTable( {
        scrollY:        600,
        scrollCollapse: true,
        paging:         false,
        fixedColumns:   true,
        select:         true,
        searching: false,
        columnDefs: [
            {
                className: 'mdl-data-table__cell--non-numeric'
            }
        ]
      } );

      //default table color
      colorTable(".reockAnalysis", .289);
      colorTable(".polsbyAnalysis", .095);
      colorTable(".schwartzbergAnalysis", .308);
      colorTable(".convexHullAnalysis", .494);
      colorTable(".xSymmetryAnalysis", .6);
      colorTable(".lengthWidthAnalysis", .6);

      //highlight row and generate charts on hover
        $('#districtTableBody tr').hover(function(){
            var district = $(this).attr('id');
            highlightDistrict(district);
            districtChart(district);
            averageChart(district);

            //highlighting the rows with the good/bad/ok colors
            $(`.boxable${district}.bad`).css('background-color', '#ff6666');
            $(`.boxable${district}.good`).css('background-color', '#99ff99');

        }, function(){
            resetAllHighlights();
            var district = $(this).attr('id');

            //reset all color highlights
            $(`.boxable${district}.bad`).css('background-color', '');
            $(`.boxable${district}.good`).css('background-color', '');
        });

        function districtChart(district){
            let BLACK = "#000000"

            let reockColor = findColor(`.reockAnalysis.boxable${district}`) || BLACK;
            let polsbyPopperColor = findColor(`.polsbyAnalysis.boxable${district}`) || BLACK;
            let schwartzbergColor = findColor(`.schwartzbergAnalysis.boxable${district}`) || BLACK;
            let xSymmetryColor = findColor(`.xSymmetryAnalysis.boxable${district}`) || BLACK;
            let lengthWidthColor = findColor(`.lengthWidthAnalysis.boxable${district}`) || BLACK;
            let convexHullColor = findColor(`.convexHullAnalysis.boxable${district}`) || BLACK;

            var barChart = c3.generate({
                title: {
                    text:`District ${district} scores`
                },
                bindto: '#barChart',
                data: {
                    type: 'bar',
                    columns: [
                        ['Reock', dataObj[district]['Reock'].toFixed(3)],
                        ['PolsbyPopper', dataObj[district]['PolsbyPopper'].toFixed(3)],
                        ['Schwartzberg', dataObj[district]['Schwartzberg'].toFixed(3)],
                        ['ConvexHull', dataObj[district]['ConvexHull'].toFixed(3)],
                        ['LengthWidth', dataObj[district]['LengthWidth'].toFixed(3)],
                        ['XSymmetry', dataObj[district]['XSymmetry'].toFixed(3)]
                    ],
                    colors: {
                        Reock: reockColor,
                        PolsbyPopper: polsbyPopperColor,
                        Schwartzberg: schwartzbergColor,
                        XSymmetry: xSymmetryColor,
                        LengthWidth: lengthWidthColor,
                        ConvexHull: convexHullColor
                    },
                    labels: true
                },
                axis: {
                    x: {
                        type: 'category'
                    },
                    y: {
                        max: 1,
                        min: 0,
                        padding: {top:0, bottom:0}
                    }
                },
                bar: {
                    width: {
                        ratio: .9
                    }
                }
            });
        }

        function averageChart(district){

            if( $('#map').data('mapType')){
                var metric = $('#map').data('mapType');
            } else {
                return;
            }

            let average = 0;

            for(var dist in dataObj){
                average += dataObj[dist][metric]
            }

            average = average / Object.keys(dataObj).length;

            var lengthwidthBarChart = c3.generate({
                title: {
                    text: `District ${district} ${metric}`
                },
                bindto: '#lengthwidthBarChart',
                data: {
                    type: 'bar',
                    columns: [
                        ['District', dataObj[district][metric].toFixed(3) ],
                        ['State Average', average.toFixed(3) ]
                    ],
                    colors: {
                        District: '#bbc007',
                        StateAverage: '#007bbc'
                    },
                    keys: {
                        x: 'indicator',
                        value: ['score']
                    },
                    labels: true
                },
                axis: {
                        x: {
                            type: 'category'
                        },
                        y: {
                            max: 1,
                            min: 0,
                            padding: {top:0, bottom:0}
                        }
                },
                bar: {
                    width: {
                        ratio: .9
                    }
                }
            });
        }
    });
    </script>
  </body>
</html>
